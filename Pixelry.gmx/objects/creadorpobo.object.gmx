<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.p2=part_type_create()
//create the particle, this returns the id for later use
//we store it in the variable global.p1
part_system_depth(global.p2,-8)

part_type_sprite(global.p2,parti_pobo,0,1,1)
//part_type_shape(global.p1,sprite0)
//define the shape of the particle, we use pixel
//here we use the id returned in previous function
//there are many different shapes avaible, eg. circle, cloud or snow



part_type_size(global.p2,0.5,1,0,0)
//define the size, the amount of values may confuse you
//but it's actually kind of easy, just read the manual and
//you'll see what they do

part_type_life(global.p2, 32, 52)
//how long the particle will last in steps, we have a random value
//between 10 and 20, meaning between 1/3 and 2/3 seconds

part_type_alpha2(global.p2,0.8,0)
//here we define the particle's alpha, it should start at 0.8 and then
//fade out to 0

//part_type_color1(global.p1,c_red)
//the color of the particle, this could be any color, or even
//your own color created by make_color_rgb() or make_color_hsv()

part_type_speed(global.p2,0.002,0.002,0,0)
//here we also have some arguments, no need to panic, the manual
//explains it well

part_type_direction(global.p2,0,360,0,0)
//the direction, this time between 0 and 360, meaning any direction

part_type_gravity(global.p2,0.01,-270)
//we don't want any gravity, just wanted to let you know the function exists


global.ps2=part_system_create()
//create a particle system, particle systems are used to show the particles
//it returns the particle system's id that we save into global.ps1

part_system_depth(global.p2,-1)
//we can change the depth on which the particles are drawn
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
