<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//The name the player has entered.
global.name = ""
//Maximum number of characters for the name.
max_name_length = 10
//Highlighted position.
highlighted_position = 0
//x position of characters. 
char_xpos = x
//y position of characters.
char_ypos = y
//Vertical spacing between characters.
char_vert_spacing = 32
//Horizontal spacing between characters
char_hori_spacing = 43
//Number of horizontal rows.
char_length = 4
//Number of vertical rows.
char_width = 7
//x position of name.
name_xpos = x+40
//y position of name.
name_ypos = y-30
//Horizontal spacing between name's characters.
name_hori_spacing = 20
//x position of highlight in relevance to character position.
highlight_xpos = -13
//y position of highlight in relevance to character position.
highlight_ypos = -8
//All the characters that will be displayed. The last two characters
//are excluded because they are drawn without using this array.
character[0] = "A"
character[1] = "B"
character[2] = "C"
character[3] = "D"
character[4] = "E"
character[5] = "F"
character[6] = "G"
character[7] = "H"
character[8] = "I"
character[9] = "J"
character[10] = "K"
character[11] = "L"
character[12] = "M"
character[13] = "N"
character[14] = "O"
character[15] = "P"
character[16] = "Q"
character[17] = "R"
character[18] = "S"
character[19] = "T"
character[20] = "U"
character[21] = "V"
character[22] = "W"
character[23] = "X"
character[24] = "Y"
character[25] = "Z"

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//If up is pressed, move the highlighted position up one row.
if keyboard_check_pressed(vk_up) {
  if highlighted_position &gt;= char_width {
    highlighted_position -= char_width
  } else {
    highlighted_position += char_width*(char_length-1)
  }
}
//If up is pressed, move the highlighted position down one row.
if keyboard_check_pressed(vk_down) {
  if highlighted_position &lt; char_width*(char_length-1) {
    highlighted_position += char_width
  } else {
    highlighted_position -= char_width*(char_length-1)
  }
}
//If right is pressed, move the highlighted position to the right.
if keyboard_check_pressed(vk_right) {
  if highlighted_position mod char_width = char_width-1 {
    highlighted_position -= char_width-1
  } else {
    highlighted_position += 1
  }
}
//If left is pressed, move the highlighted position to the left.
if keyboard_check_pressed(vk_left)
    if highlighted_position mod char_width = 0
        highlighted_position += char_width-1
    else
        highlighted_position -= 1
//If enter is pressed...
if keyboard_check_pressed(vk_space) {
  //If the backspace character is selected, remove a character.
  if highlighted_position = 26
      if string_length(global.name) &gt; 0 {
      if file_exists((working_directory+ "\Data\") + "sound.opt")
        sound_play(st_cancel)
          global.name = string_delete(global.name,string_length(global.name),1)
          }
  //If the end character is selected, progress the game.
  if highlighted_position = 27
      if string_length(global.name) &gt; 0
      {
      if file_exists((working_directory+ "\Data\") + "sound.opt")
      sound_play(entrar)
          fname=file_text_open_write((working_directory+ "\Data\") + "mname.txt")
          file_text_write_string(fname,string(global.name))
          file_text_close(fname)
          room_goto(historia1)
      }
  //If any other character is selected, add the character to
  //the name.
  if highlighted_position &lt; 26 &amp;&amp; string_length(global.name) != max_name_length {
    if file_exists((working_directory+ "\Data\") + "sound.opt") {
      sound_play(tuc)
    }
    global.name += character[highlighted_position]
  }
}
//This code changes the letters from upper case to lower case when a
//character is selected. If you want the characters to remain unchanged,
//remove this piece of code.
if string_length(global.name) = 0 {
  character[0] = "A"
  character[1] = "B"
  character[2] = "C"
  character[3] = "D"
  character[4] = "E"
  character[5] = "F"
  character[6] = "G"
  character[7] = "H"
  character[8] = "I"
  character[9] = "J"
  character[10] = "K"
  character[11] = "L"
  character[12] = "M"
  character[13] = "N"
  character[14] = "O"
  character[15] = "P"
  character[16] = "Q"
  character[17] = "R"
  character[18] = "S"
  character[19] = "T"
  character[20] = "U"
  character[21] = "V"
  character[22] = "W"
  character[23] = "X"
  character[24] = "Y"
  character[25] = "Z"
} else {
  character[0] = "a"
  character[1] = "b"
  character[2] = "c"
  character[3] = "d"
  character[4] = "e"
  character[5] = "f"
  character[6] = "g"
  character[7] = "h"
  character[8] = "i"
  character[9] = "j"
  character[10] = "k"
  character[11] = "l"
  character[12] = "m"
  character[13] = "n"
  character[14] = "o"
  character[15] = "p"
  character[16] = "q"
  character[17] = "r"
  character[18] = "s"
  character[19] = "t"
  character[20] = "u"
  character[21] = "v"
  character[22] = "w"
  character[23] = "x"
  character[24] = "y"
  character[25] = "z"
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i,j,pos;
draw_set_font(font_name_entry)
draw_set_halign(fa_left)
draw_set_color(c_white)
draw_text(x,y-30,"S  i  r")
//This draws each character.
for(i=0;i&lt;char_length;i+=1) {
  for(j=0;j&lt;char_width;j+=1) {
    //Determines the current position.
    pos = i*char_width+j
    //If the current position is not the back space or end, draw 
    //the character.
    if pos &lt; 26 {
      draw_text(char_xpos+j*char_hori_spacing,char_ypos+i*char_vert_spacing,character[pos])
    }
    //If the position is the back space, draw the back space sprite.
    if pos = 26 {
      draw_sprite(spr_backspace,0,char_xpos+j*char_hori_spacing+highlight_xpos,char_ypos+i*char_vert_spacing+highlight_ypos)            
    }
    //If the position is the end button, draw the end sprite.
    if pos = 27 {
      draw_sprite(spr_end,0,char_xpos+j*char_hori_spacing+highlight_xpos,char_ypos+i*char_vert_spacing+highlight_ypos)
    }
    //If the current position is being highlighted, draw the 
    //higlight sprite.
    if pos = highlighted_position {
      draw_sprite(spr_highlight,0,char_xpos+j*char_hori_spacing+highlight_xpos,char_ypos+i*char_vert_spacing+highlight_ypos)
    }
  }
}
for(i=1;i&lt;=max_name_length;i+=1) {
  //This draws the name and the underline.
  draw_text(name_xpos+i*name_hori_spacing,name_ypos,string_char_at(global.name,i))
  draw_text(name_xpos+i*name_hori_spacing,name_ypos+4,"_")
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
